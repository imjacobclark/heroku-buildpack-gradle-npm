#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# fail fast
set -e

BP_DIR=$(cd $(dirname $0)/..; pwd) # absolute path
BIN_DIR=$BP_DIR/bin
OPT_DIR=$BP_DIR/opt
LIB_DIR=$BP_DIR/lib
. $LIB_DIR/common.sh
. $LIB_DIR/failures.sh

### Parse args
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

### Load dependencies

source $BP_DIR/lib/json.sh
source $BP_DIR/lib/binaries.sh

export_env_dir $ENV_DIR

install_node() {
  local node_engine=$(read_json "$BUILD_DIR/package.json" ".engines.node")
  local npm_engine=$(read_json "$BUILD_DIR/package.json" ".engines.npm")

  echo "engines.node (package.json):  ${node_engine:-unspecified}"
  echo "engines.npm (package.json):   ${npm_engine:-unspecified (use default)}"

  install_nodejs "$node_engine" "$BUILD_DIR/.heroku/node"
  install_npm "$npm_engine" "$BUILD_DIR/.heroku/node"
}

install_node | output "$LOG_FILE"

if has_stage_task $BUILD_DIR; then
  DEFAULT_GRADLE_TASK="stage"
elif is_spring_boot $BUILD_DIR; then
  if is_webapp_runner $BUILD_DIR; then
    echo "-----> Spring Boot and Webapp Runner detected"
  else
    echo "-----> Spring Boot detected"
  fi
  DEFAULT_GRADLE_TASK="build -x test"
elif is_ratpack $BUILD_DIR; then
  echo "-----> Ratpack detected"
  DEFAULT_GRADLE_TASK="installDist -x test"
else
  DEFAULT_GRADLE_TASK="stage"
fi

if [ -z "$GRADLE_TASK" ]; then
  GRADLE_TASK="${DEFAULT_GRADLE_TASK}"
fi

JVM_COMMON_BUILDPACK=${JVM_COMMON_BUILDPACK:-"https://codon-buildpacks.s3.amazonaws.com/buildpacks/heroku/jvm-common.tgz"}
mkdir -p /tmp/jvm-common
curl --retry 3 --silent --location $JVM_COMMON_BUILDPACK | tar xzm -C /tmp/jvm-common --strip-components=1
. /tmp/jvm-common/bin/util
. /tmp/jvm-common/bin/java
install_java_with_overlay ${BUILD_DIR}

export GRADLE_OPTS=${GRADLE_OPTS-"-Dorg.gradle.daemon=false"}

if [ ! -d $CACHE_DIR ] ; then
  mkdir $CACHE_DIR
fi

export GRADLE_USER_HOME=${GRADLE_USER_HOME:-$CACHE_DIR/.gradle}

if [ ! -f $BUILD_DIR/gradlew ] ; then
  echo "-----> Installing Gradle Wrapper..."
  echo "       WARNING: Your application does not have it's own gradlew file."
  echo "       We'll install one for you, but this is a deprecated feature and"
  echo "       in the future may not be supported."
  cp -rn ${OPT_DIR}/wrapper/* ${BUILD_DIR}
fi
BUILDCMD="./gradlew"
chmod +x ${BUILD_DIR}/gradlew

BUILDCMD="$BUILDCMD $GRADLE_TASK"

cd $BUILD_DIR

# build app
echo "-----> Building Gradle app..."
echo "-----> executing $BUILDCMD"

buildLogFile=$(create_build_log_file)

$BUILDCMD 2>&1 | output $buildLogFile

if [ "${PIPESTATUS[*]}" != "0 0" ]; then
  handle_gradle_errors $buildLogFile
fi